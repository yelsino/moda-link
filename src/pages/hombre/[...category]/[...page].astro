---
import type { GetStaticPaths } from "astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Card from "@components/Card.astro";
import Filter from "@components/islands/Filter.svelte";
import Layout from "@layouts/Layout.astro";
import Pagination from "@components/Pagination.astro";
import { orderProducts } from "@libs/products.libs";


export const getStaticPaths =  (async ({ paginate }) => {
   const categories = [
    { params: { category: "accesorios" } },
    { params: { category: "camiseta" } },
    { params: { category: "pantalon" } },
    { params: { category: "gorros" } },
    { params: { category: "zapatos" } },
  ];


  const urlBase = "https://moda-link-api.deno.dev/api/v1/products?";

 // Usar Promise.all() para realizar las peticiones de manera concurrente
 const paths = await Promise.all(categories.map(async (category) => {
    console.log(category);
    
    const params = new URLSearchParams();
    params.set("genero", "hombre");
    params.set("filter", category.params.category);

    const response = await fetch(urlBase + params);
    const products = await response.json();

    return paginate(orderProducts(products), {
      params: category.params,
      pageSize: 120,
    });
  }));

  // Utilizar flat() para aplanar el array de arrays devuelto por Promise.all()
  return paths.flat();

}) satisfies GetStaticPaths;


const { category } = Astro.params
const { page } = Astro.props;
const pathname = new URL(Astro.request.url).pathname.split('/');
const firstPath  = `/${pathname[1]}/${pathname[2]}` 




---

<Layout title="Moda Link">
  <h1>categoria ropa</h1>
  <div class="h-full">
    <Header />
    <main class="mt-10 flex">
      <Filter client:visible category={category} genero="hombre" />
      <section
        class="flex flex-wrap place-content-center mx-auto gap-3 sm:gap-10 items-center py-10"
      >
        {
          page.data.map((product:any) => (
            <Card
              description={product.descripcion}
              image={product.imagen}
              link={product.url}
              marca={product.marca}
              genero={product.genero}
              likes={product.likes}
              urlAfiliado={product.urlAfiliado}
              precio={product.precio}
              categoria={product.categoria}
              subCategoria={product.subCategoria}
            />
          ))
        }
      </section>
    </main>
    <div class="pb-10">
      <Pagination 
        gender={pathname[1]} 
        length={page.lastPage} 
        currentUrl={page.url.current} 
        currentPage={page.currentPage} 
        firstUrl={firstPath} 
        prevUrl={page.url.prev} 
        nextUrl={page.url.next} 
        lastUrl={`${firstPath}/${page.lastPage}`}
      />
    </div>
    <Footer />
  </div>
</Layout>
